/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/infrastruktur/api/v1/public/auth/refresh": {
    post: operations["refreshToken"];
  };
  "/infrastruktur/api/v1/public/auth/logout": {
    /** Diese API erfordert eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header. */
    post: operations["logout"];
  };
  "/infrastruktur/api/v1/public/auth/login": {
    post: operations["login"];
  };
  "/infrastruktur/api/v1/public/organisation": {
    get: operations["getOrganisationsForPublic"];
  };
  "/infrastruktur/api/v1/public/organisation/my": {
    /** Diese API erfordert eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header. */
    get: operations["getOrganisationsOfUser"];
  };
  "/merkmale/api/v1/public/propertygroup": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Merkmalsgruppen abrufen zu können. */
    post: operations["getProperyGroupsForPublic"];
  };
  "/merkmale/api/v1/public/property": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Merkmale abrufen zu können. */
    post: operations["getPropertiesForPublic"];
  };
  "/merkmale/api/v1/public/propertygroup/{guid}": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Merkmalsgruppen abrufen zu können. */
    get: operations["getPropertyGroupForPublic"];
  };
  "/merkmale/api/v1/public/property/{guid}": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Merkmale abrufen zu können. */
    get: operations["getPropertyForPublic"];
  };
  "/merkmale/api/v1/public/filter": {
    get: operations["getGlobalFilters"];
  };
  "/aia/api/v1/public/loin": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    post: operations["getLoinsForPublic"];
  };
  "/aia/api/v1/public/domainSpecificModel": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    post: operations["getDomainSpecificModelsForPublic"];
  };
  "/aia/api/v1/public/contextInfo": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    post: operations["getContextInfosForPublic"];
  };
  "/aia/api/v1/public/aiaTemplate": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    post: operations["getTemplatesForPublic"];
  };
  "/aia/api/v1/public/aiaProject": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    post: operations["getProjectsForPublic"];
  };
  "/aia/api/v1/public/loin/{guid}": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["getLoinForPublic"];
  };
  "/aia/api/v1/public/loin/{guid}/pdf": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportPdf"];
  };
  "/aia/api/v1/public/loin/{guid}/openOffice": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportOdt"];
  };
  "/aia/api/v1/public/loin/{guid}/okstra": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportOkstra"];
  };
  "/aia/api/v1/public/loin/{guid}/loinXML": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportXml"];
  };
  "/aia/api/v1/public/loin/{guid}/IDS": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportIds"];
  };
  "/aia/api/v1/public/filter": {
    get: operations["getGlobalFilters1"];
  };
  "/aia/api/v1/public/domainSpecificModel/{guid}": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["getDomainSpecificModelForPublic"];
  };
  "/aia/api/v1/public/domainSpecificModel/{guid}/pdf": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportPdf_1"];
  };
  "/aia/api/v1/public/domainSpecificModel/{guid}/openOffice": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportOdt_1"];
  };
  "/aia/api/v1/public/domainSpecificModel/{guid}/okstra": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportOkstra_1"];
  };
  "/aia/api/v1/public/domainSpecificModel/{guid}/loinXML": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportXml_1"];
  };
  "/aia/api/v1/public/domainSpecificModel/{guid}/IDS": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportIds_1"];
  };
  "/aia/api/v1/public/contextInfo/{guid}": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["getContextInfoForPublic"];
  };
  "/aia/api/v1/public/contextInfo/{guid}/pdf": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportPdf_2"];
  };
  "/aia/api/v1/public/contextInfo/{guid}/openOffice": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportOdt_2"];
  };
  "/aia/api/v1/public/aiaTemplate/{guid}": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["getTemplateForPublic"];
  };
  "/aia/api/v1/public/aiaTemplate/{guid}/pdf": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportPdf_3"];
  };
  "/aia/api/v1/public/aiaTemplate/{guid}/openOffice": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportOdt_3"];
  };
  "/aia/api/v1/public/aiaProject/{guid}": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["getProjectForPublic"];
  };
  "/aia/api/v1/public/aiaProject/{guid}/pdf": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportPdf_4"];
  };
  "/aia/api/v1/public/aiaProject/{guid}/openOffice": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportOdt_4"];
  };
  "/aia/api/v1/public/aiaProject/{guid}/okstra": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportOkstra_2"];
  };
  "/aia/api/v1/public/aiaProject/{guid}/loinXML": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportXml_2"];
  };
  "/aia/api/v1/public/aiaProject/{guid}/IDS": {
    /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
    get: operations["exportIds_2"];
  };
}

export interface components {
  schemas: {
    RefreshTokenRequestDTO: {
      refreshToken?: string;
    };
    JWTTokenPublicDto: {
      token?: string;
      refreshToken?: string;
      /** Format: date-time */
      validTill?: string;
    };
    UserLoginPublicDto: {
      mail: string;
      password: string;
    };
    OrganisationForPublicDTO: {
      name?: string;
      description?: string;
      /** Format: uuid */
      guid?: string;
      /** Format: uuid */
      parentGuid?: string;
      bundOrganisationOrChild?: boolean;
    };
    PropertyOrGroupForPublicRequest: {
      /** @description GUIDs der Organisationen, denen die Merkmale oder Gruppen angehören müssen */
      organisationGuids?: string[];
      /** @description Teilstring, den die Namen der zu liefernden Merkmale und Gruppen beinhalten müssen */
      searchString?: string;
      /** @description GUIDs der Filter, die die zu liefernden Merkmale und Gruppen besitzen müssen */
      filterGuids?: string[];
      /**
       * Format: uuid
       * @description GUID der Gruppe, in der die zu liefernden Merkmale und Gruppen enthalten sein müssen
       */
      parentGuid?: string;
      /** @description true, wenn auch veraltete Merkmale und Gruppen mitgeliefert werden sollen */
      includeDeprecated?: boolean;
      /**
       * Format: int32
       * @description Laufende Nummer der Ergebnisseite
       */
      pageNumber?: number;
    };
    PropertyOrGroupCatalogInformation: {
      catalogName?: string;
      catalogUrl?: string;
      catalogProvider?: string;
      infoElementUrl?: string;
    };
    PropertyOrGroupForPublicDto: {
      name?: string;
      definition?: string;
      /** Format: uuid */
      guid?: string;
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      parentGuids?: string[];
      organisationName?: string;
      dataType?: string;
      units?: string[];
      /** @enum {string} */
      category?:
        | "ALTERNATIVE_USE"
        | "CLASS"
        | "COMPOSED_PROPERTY"
        | "DOMAIN"
        | "REFERENCE_DOCUMENT"
        | "NAME_PROPERTY_SET";
      deprecated?: boolean;
      /** Format: int32 */
      currentPage?: number;
      /** Format: int32 */
      maxPage?: number;
      catalogInformation?: components["schemas"]["PropertyOrGroupCatalogInformation"];
    };
    BimPortalMetadata: {
      /**
       * @deprecated
       * @enum {string}
       */
      status?:
        | "INITIAL"
        | "PROPOSED"
        | "CREATION"
        | "REVIEW"
        | "VALIDATION"
        | "ACCEPTED"
        | "PUBLISHED"
        | "DEPRECATED"
        | "SORTED_OUT"
        | "REJECTED";
      /** @enum {string} */
      visibility?: "PUBLIC" | "SECURED" | "CHILD" | "PRIVATE";
      external?: boolean;
      /** Format: uuid */
      organisationId: string;
      transferred?: boolean;
      /** @enum {string} */
      nextState?:
        | "PROPOSE"
        | "ACCEPT"
        | "SUBMIT_FOR_REVIEW"
        | "SUBMIT_FOR_VALIDATION"
        | "VALIDATED"
        | "PUBLISH"
        | "DEPRECATE"
        | "SORT_OUT"
        | "REJECT"
        | "RESTORE"
        | "EXTEND"
        | "CREATE"
        | "IMPORT";
    };
    BookmarkStatus: {
      /** Format: uuid */
      bookmarkId?: string;
    };
    BoundaryValues: {
      /** Format: uuid */
      id?: string;
      /** Format: int64 */
      version?: number;
      /** Format: date-time */
      createdDate?: string;
      boundaryValuePairs: string[];
      unit: string;
    };
    CountryLanguageCode: {
      code?: string;
      language?: string;
      country?: string;
    };
    DefinitionsInLanguageDto: {
      definition?: string;
      language?: string;
      value?: string;
    };
    DescriptionsInLanguageDto: {
      description?: string;
      language?: string;
      languageName?: string;
      countryName?: string;
    };
    DigitalFormat: {
      /** Format: uuid */
      id?: string;
      /** Format: int64 */
      version?: number;
      /** Format: date-time */
      createdDate?: string;
      precision: string;
      unitOfMeasure: string;
    };
    ExamplesInLanguageDto: {
      example?: string;
      language?: string;
      languageName?: string;
      countryName?: string;
    };
    ListOfPossibleValuesInLanguageDto: {
      possibleValue?: string;
      language?: string;
      value?: string;
    };
    NamesInLanguage: {
      /** Format: uuid */
      id?: string;
      /** Format: int64 */
      version?: number;
      /** Format: date-time */
      createdDate?: string;
      name: string;
      language: string;
      value?: string;
    };
    NamesInLanguageDto: {
      name?: string;
      language?: string;
      languageName?: string;
      countryName?: string;
      value?: string;
    };
    ObservationStatus: {
      /** Format: uuid */
      observationId?: string;
    };
    PhysicalQuantity: {
      /** Format: uuid */
      id?: string;
      /** Format: int64 */
      version?: number;
      /** Format: date-time */
      createdDate?: string;
      siUnit: string;
      language: string;
    };
    PropertyDto: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      /** @enum {string} */
      status?:
        | "INITIAL"
        | "PROPOSED"
        | "CREATION"
        | "REVIEW"
        | "VALIDATION"
        | "ACCEPTED"
        | "PUBLISHED"
        | "DEPRECATED"
        | "SORTED_OUT"
        | "REJECTED";
      /** Format: date-time */
      dateOfCreation?: string;
      /** Format: date-time */
      dateOfActivation?: string;
      /** Format: date-time */
      dateOfLastChange?: string;
      /** Format: date-time */
      dateOfRevision?: string;
      /** Format: date-time */
      dateOfVersion?: string;
      /** Format: date-time */
      dateOfDeactivation?: string;
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      replaces?: components["schemas"]["PropertyOrGroupWithNamesInLanguage"][];
      replacedBy?: components["schemas"]["PropertyOrGroupWithNamesInLanguage"][];
      deprecationExplanation?: string;
      relationOfThePropertyIdentifiersInTheInterconnectedDictionaries?: components["schemas"]["RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries"][];
      catalogInformation?: components["schemas"]["PropertyOrGroupCatalogInformation"];
      creatorsLanguage?: components["schemas"]["CountryLanguageCode"];
      namesInLanguage?: components["schemas"]["NamesInLanguageDto"][];
      definitionsInLanguage?: components["schemas"]["DefinitionsInLanguageDto"][];
      descriptionsInLanguage?: components["schemas"]["DescriptionsInLanguageDto"][];
      examplesInLanguage?: components["schemas"]["ExamplesInLanguageDto"][];
      connectedProperties?: components["schemas"]["PropertyOrGroupWithNamesInLanguage"][];
      groupOfProperties?: components["schemas"]["SimpleParentGroup"][];
      symbolsOfThePropertyInAGivenPropertyGroup?: components["schemas"]["SymbolsOfTheGivenPropertyGroupDto"][];
      visualRepresentation?: string[];
      countryOfUse?: string[];
      subdivisionOfUse?: string[];
      countryOfOrigin?: string;
      physicalQuantity?: components["schemas"]["PhysicalQuantity"][];
      /** @description Enthält die Dimension der Einheiten in der folgenden Reihenfolge: Länge, Masse, Zeit, Stoffmenge, Lichtstärke, Stromstärke, Temperatur */
      dimension?: string;
      methodOfMeasurement?: string;
      dataType?: string;
      dynamicProperty?: string;
      parametersOfTheDynamicProperty?: components["schemas"]["PropertyOrGroupWithNamesInLanguage"][];
      units?: string[];
      namesOfTheDefiningValues?: components["schemas"]["NamesInLanguage"][];
      definingValues?: string[];
      tolerance?: number[];
      digitalFormat?: components["schemas"]["DigitalFormat"][];
      textFormat?: components["schemas"]["TextFormat"];
      listOfPossibleValuesInLanguage?: components["schemas"]["ListOfPossibleValuesInLanguageDto"][];
      boundaryValues?: components["schemas"]["BoundaryValues"][];
      metadata?: components["schemas"]["BimPortalMetadata"];
      bookmarked?: components["schemas"]["BookmarkStatus"];
      observed?: components["schemas"]["ObservationStatus"];
      /** Format: uuid */
      organisationId?: string;
      organisationName?: string;
      tags?: components["schemas"]["TagAssignmentDto"][];
      /** @enum {string} */
      organisationType?: "SIGNED_IN" | "DEFINED" | "BIM_PORTAL" | "BUND";
      canCreateNewVersion?: boolean;
    };
    PropertyGroupDto: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      /** @enum {string} */
      informationElementStatus?:
        | "INITIAL"
        | "PROPOSED"
        | "CREATION"
        | "REVIEW"
        | "VALIDATION"
        | "ACCEPTED"
        | "PUBLISHED"
        | "DEPRECATED"
        | "SORTED_OUT"
        | "REJECTED";
      /** Format: date-time */
      dateOfCreation?: string;
      /** Format: date-time */
      dateOfActivation?: string;
      /** Format: date-time */
      dateOfLastChange?: string;
      /** Format: date-time */
      dateOfRevision?: string;
      /** Format: date-time */
      dateOfVersion?: string;
      /** Format: date-time */
      dateOfDeactivation?: string;
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      replaces?: components["schemas"]["PropertyOrGroupWithNamesInLanguage"][];
      replacedBy?: components["schemas"]["PropertyOrGroupWithNamesInLanguage"][];
      deprecationExplanation?: string;
      relationOfThePropertyGroupIdentifiersInTheInterconnectedDictionaries?: components["schemas"]["RelationOfThePropertyGroupIdentifiersInTheInterconnectedDictionaries"][];
      creatorsLanguage?: components["schemas"]["CountryLanguageCode"];
      namesInLanguage?: components["schemas"]["NamesInLanguageDto"][];
      definitionsInLanguage?: components["schemas"]["DefinitionsInLanguageDto"][];
      visualRepresentation?: string[];
      countryOfUse?: string[];
      subdivisionOfUse?: string[];
      countryOfOrigin?: string;
      categoryOfGroupOfProperties?: string;
      properties?: components["schemas"]["PropertyDto"][];
      childrenPropertyGroups?: components["schemas"]["PropertyGroupDto"][];
      parentGroup?: components["schemas"]["SimpleParentGroup"];
      metadata?: components["schemas"]["BimPortalMetadata"];
      bookmarked?: components["schemas"]["BookmarkStatus"];
      observed?: components["schemas"]["ObservationStatus"];
      simpleInheritedProperties?: components["schemas"]["SimpleInheritedPropertyDto"][];
      /** Format: uuid */
      organisationId?: string;
      organisationName?: string;
      tags?: components["schemas"]["PropertyGroupTagDto"][];
      /** @enum {string} */
      organisationType?: "SIGNED_IN" | "DEFINED" | "BIM_PORTAL" | "BUND";
      canCreateNewVersion?: boolean;
      catalogInformation?: components["schemas"]["PropertyOrGroupCatalogInformation"];
    };
    PropertyGroupTagDto: {
      tag?: components["schemas"]["TagDto"];
      /** Format: uuid */
      organisationId?: string;
    };
    PropertyOrGroupWithNamesInLanguage: {
      /** Format: uuid */
      id?: string;
      namesInLanguage?: components["schemas"]["NamesInLanguageDto"][];
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      /** @enum {string} */
      informationElementStatus?:
        | "INITIAL"
        | "PROPOSED"
        | "CREATION"
        | "REVIEW"
        | "VALIDATION"
        | "ACCEPTED"
        | "PUBLISHED"
        | "DEPRECATED"
        | "SORTED_OUT"
        | "REJECTED";
    };
    RelationOfThePropertyGroupIdentifiersInTheInterconnectedDictionaries: {
      /** Format: uuid */
      id?: string;
      /** Format: int64 */
      version?: number;
      /** Format: date-time */
      createdDate?: string;
      propGroupID: string;
      interConDictID: string;
    };
    RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries: {
      /** Format: uuid */
      id?: string;
      /** Format: int64 */
      version?: number;
      /** Format: date-time */
      createdDate?: string;
      propertyID: string;
      interConDictID: string;
    };
    SimpleInheritedPropertyDto: {
      /** Format: uuid */
      id?: string;
      names?: components["schemas"]["NamesInLanguage"][];
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      /** @enum {string} */
      informationElementStatus?:
        | "INITIAL"
        | "PROPOSED"
        | "CREATION"
        | "REVIEW"
        | "VALIDATION"
        | "ACCEPTED"
        | "PUBLISHED"
        | "DEPRECATED"
        | "SORTED_OUT"
        | "REJECTED";
    };
    SimpleParentGroup: {
      /** Format: uuid */
      id?: string;
      namesInLanguage?: components["schemas"]["NamesInLanguageDto"][];
      definitionsInLanguage?: components["schemas"]["DefinitionsInLanguageDto"][];
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      /** @enum {string} */
      informationElementStatus?:
        | "INITIAL"
        | "PROPOSED"
        | "CREATION"
        | "REVIEW"
        | "VALIDATION"
        | "ACCEPTED"
        | "PUBLISHED"
        | "DEPRECATED"
        | "SORTED_OUT"
        | "REJECTED";
      containsProperty?: boolean;
      /** Format: uuid */
      guid?: string;
      categoryOfGroupOfProperties?: string;
      userCanViewDetails?: boolean;
      versionRevisionString?: string;
    };
    SymbolsOfTheGivenPropertyGroupDto: {
      symbol?: string;
      /** Format: uuid */
      propGroupID?: string;
      groupNames?: components["schemas"]["NamesInLanguageDto"][];
    };
    TagAssignmentDto: {
      tag?: components["schemas"]["TagDto"];
      /** Format: uuid */
      organisationId?: string;
    };
    TagDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uuid */
      organisationId: string;
      global?: boolean;
      /** Format: int32 */
      assignmentCount?: number;
      /** Format: uuid */
      guidReference?: string;
    };
    TextFormat: {
      encoding?: string;
      numberOfCharacters?: string;
    };
    TagForPublicDto: {
      name: string;
      /** Format: uuid */
      guid: string;
    };
    TagGroupForPublicDto: {
      name: string;
      /** Format: uuid */
      guid: string;
      filter?: components["schemas"]["TagForPublicDto"][];
    };
    LoinForPublicRequest: {
      /** @description GUIDs der Filter, die die zu liefernden LOINs besitzen müssen */
      filterGuids?: string[];
      /** @description GUIDs der Merkmale, die die zu liefernden LOINs referenzieren müssen */
      referencedIds?: string[];
      /** @description GUIDs der Organisationen, denen die LOINs angehören müssen */
      organisationGuids?: string[];
      /** @description Teilstring, den die Namen der zu liefernden LOINs beinhalten müssen */
      searchString?: string;
      /** @description GUIDs der Kontextinformationen, die die zu liefernden LOINs referenzieren müssen */
      contextIds?: string[];
      /** @description true, wenn auch veraltete LOINs mitgeliefert werden sollen */
      includeDeprecated?: boolean;
      /**
       * Format: int32
       * @description Laufende Nummer der Ergebnisseite
       */
      pageNumber?: number;
    };
    SimpleLoinPublicDto: {
      name?: string;
      objectTypes?: string[];
      description?: string;
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      organisation?: string;
      /** @enum {string} */
      visibility?: "PUBLIC" | "SECURED" | "CHILD" | "PRIVATE";
      constructionTypes?: string[];
      projectPhases?: string[];
      purposes?: string[];
      actors?: string[];
      domainSpecificModelTypes?: string[];
      filters?: string[];
    };
    AiaDomainSpecificModelForPublicRequest: {
      /** @description GUIDs der Filter, die die zu liefernden Fachmodelle besitzen müssen */
      filterGuids?: string[];
      /** @description GUIDs der LOINs, die die zu liefernden Fachmodelle referenzieren müssen */
      referencedIds?: string[];
      /** @description GUIDs der Organisationen, denen die Fachmodelle angehören müssen */
      organisationGuids?: string[];
      /** @description Teilstring, den die Namen der zu liefernden Fachmodelle beinhalten müssen */
      searchString?: string;
      /** @description GUIDs der Kontextinformationen, die die zu liefernden Fachmodelle referenzieren müssen */
      contextIds?: string[];
      /** @description true, wenn auch veraltete Fachmodelle mitgeliefert werden sollen */
      includeDeprecated?: boolean;
      /**
       * Format: int32
       * @description Laufende Nummer der Ergebnisseite
       */
      pageNumber?: number;
    };
    SimpleDomainSpecificModelPublicDto: {
      name?: string;
      dataFormats?: string[];
      description?: string;
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      organisation?: string;
      /** @enum {string} */
      visibility?: "PUBLIC" | "SECURED" | "CHILD" | "PRIVATE";
      constructionTypes?: string[];
      projectPhases?: string[];
      purposes?: string[];
      actors?: string[];
      domainSpecificModelTypes?: string[];
      filters?: string[];
    };
    AiaContextInfoPublicRequest: {
      /** @description GUIDs der Filter, die die zu liefernden Kontextinformationen besitzen müssen */
      filterGuids?: string[];
      /** @description Spezifischer Kontextinformationstyp */
      contextType?: string;
      /** @description GUIDs der Organisationen, denen die Kontextinformationen angehören müssen */
      organisationGuids?: string[];
      /** @description Teilstring, den die Namen der zu liefernden Kontextinformationen beinhalten müssen */
      searchString?: string;
      /** @description GUIDs der Kontextinformationen, die die zu liefernden Kontextinformationen referenzieren müssen */
      contextIds?: string[];
      /** @description true, wenn auch veraltete Kontextinformationen mitgeliefert werden sollen */
      includeDeprecated?: boolean;
      /**
       * Format: int32
       * @description Laufende Nummer der Ergebnisseite
       */
      pageNumber?: number;
    };
    SimpleContextInfoPublicDto: {
      name?: string;
      /** @enum {string} */
      contextType?:
        | "CONSTRUCTION_TYPE"
        | "PURPOSE"
        | "PROJECT_PHASE"
        | "ACTOR"
        | "DOMAIN_SPECIFIC_MODEL_TYPE";
      alternativeIdentifier?: string;
      description?: string;
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      organisation?: string;
      /** @enum {string} */
      visibility?: "PUBLIC" | "SECURED" | "CHILD" | "PRIVATE";
      constructionTypes?: string[];
      projectPhases?: string[];
      purposes?: string[];
      actors?: string[];
    };
    AiaTemplateForPublicRequest: {
      /** @description GUIDs der Organisationen, denen die LOINs angehören müssen */
      organisationGuids?: string[];
      /** @description Teilstring, den die Namen der zu liefernden LOINs beinhalten müssen */
      searchString?: string;
      /** @description GUIDs der Kontextinformationen, die die zu liefernden LOINs referenzieren müssen */
      contextIds?: string[];
      /** @description true, wenn die Vorlage eine Projektvorlage ist */
      projectTemplate?: boolean;
      /** @description true, wenn die Vorlage eine Teilvorlage ist */
      template?: boolean;
      /** @description true, wenn auch veraltete LOINs mitgeliefert werden sollen */
      includeDeprecated?: boolean;
      /**
       * Format: int32
       * @description Laufende Nummer der Ergebnisseite
       */
      pageNumber?: number;
    };
    SimpleAiaTemplatePublicDto: {
      name?: string;
      /** @enum {string} */
      templateType?:
        | "COMPLETED_TEMPLATE"
        | "UNCOMPLETED_TEMPLATE"
        | "PROJECT_TEMPLATE";
      description?: string;
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      organisation?: string;
      /** @enum {string} */
      visibility?: "PUBLIC" | "SECURED" | "CHILD" | "PRIVATE";
      constructionTypes?: string[];
      projectPhases?: string[];
      purposes?: string[];
      actors?: string[];
      domainSpecificModelTypes?: string[];
      filters?: string[];
    };
    AiaProjectForPublicRequest: {
      /** @description GUIDs der Fachmodelle/Projektvorlagen, die die zu liefernden Projekte referenzieren müssen */
      referencedIds?: string[];
      /** @description GUIDs der Organisationen, denen die Projekte angehören müssen */
      organisationGuids?: string[];
      /** @description Teilstring, den die Namen der zu liefernden Projekte beinhalten müssen */
      searchString?: string;
      /** @description GUIDs der Kontextinformationen, die die zu liefernden Projekte referenzieren müssen */
      contextIds?: string[];
      /** @description true, wenn auch veraltete Projekte mitgeliefert werden sollen */
      includeDeprecated?: boolean;
      /**
       * Format: int32
       * @description Laufende Nummer der Ergebnisseite
       */
      pageNumber?: number;
    };
    SimpleAiaProjectPublicDto: {
      name?: string;
      description?: string;
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      organisation?: string;
      /** @enum {string} */
      visibility?: "PUBLIC" | "SECURED" | "CHILD" | "PRIVATE";
      constructionTypes?: string[];
      projectPhases?: string[];
      purposes?: string[];
      actors?: string[];
      domainSpecificModelTypes?: string[];
    };
    ClassificationPublicDto: {
      /** Format: uuid */
      id?: string;
      property?: components["schemas"]["PropertyOrGroupPublicReference"];
      propertyGroup?: components["schemas"]["PropertyOrGroupPublicReference"];
    };
    ContextInfoPublicReference: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      name?: string;
    };
    DataFormatDto: {
      /** Format: uuid */
      id?: string;
      type?: components["schemas"]["DataFormatTypeDto"];
      "@class": string;
    };
    DataFormatType: {
      /** Format: uuid */
      id?: string;
      /** Format: int64 */
      version?: number;
      /** Format: date-time */
      createdDate?: string;
      name?: string;
      /** Format: int32 */
      majorRelease?: number;
      /** Format: int32 */
      minorRelease?: number;
      /** Format: int32 */
      addendum?: number;
      /** Format: int32 */
      corrigendum?: number;
      /** @enum {string} */
      variant?: "IFC" | "OKSTRA" | "OTHER";
      ifc?: boolean;
    };
    DataFormatTypeDto: {
      /** Format: uuid */
      id?: string;
      name?: string;
      /** Format: int32 */
      majorRelease?: number;
      /** Format: int32 */
      minorRelease?: number;
      /** Format: int32 */
      addendum?: number;
      /** Format: int32 */
      corrigendum?: number;
      /** @enum {string} */
      variant?: "IFC" | "OKSTRA" | "OTHER";
      ifc?: boolean;
    };
    DocumentationDto: {
      /** Format: uuid */
      id?: string;
      name?: string;
      purpose?: string;
      format?: string;
      link?: string;
      exportAsAttribute?: boolean;
    };
    FilterAssignmentDto: {
      filter?: components["schemas"]["FilterDto"];
      /** Format: uuid */
      organisationId?: string;
    };
    FilterDto: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uuid */
      organisationId: string;
      filterGroupName?: string;
      /** Format: uuid */
      filterGroup?: string;
      global?: boolean;
      /** Format: int32 */
      assignmentCount?: number;
    };
    IFCClassDto: {
      /** Format: uuid */
      id?: string;
      name?: string;
      /** Format: uuid */
      ifcView?: string;
    };
    IFCDto: components["schemas"]["DataFormatDto"] & {
      ifcView?: components["schemas"]["IFCViewDto"];
      ifcClass?: components["schemas"]["IFCClassDto"];
      ifcType?: components["schemas"]["IFCTypeDto"];
      groupAsIFCePset?: boolean;
      saveObjectTypeAsProperty?: boolean;
    };
    IFCTypeDto: {
      /** Format: uuid */
      id?: string;
      name?: string;
      /** Format: uuid */
      ifcClass?: string;
    };
    IFCViewDto: {
      /** Format: uuid */
      id?: string;
      name?: string;
      ifcVersion?: components["schemas"]["DataFormatType"];
    };
    LOINPublicDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdDate?: string;
      /** Format: date-time */
      dateOfActivation?: string;
      /** Format: date-time */
      dateOfLastChange?: string;
      /** Format: date-time */
      dateOfRevision?: string;
      /** Format: date-time */
      dateOfVersion?: string;
      /** Format: date-time */
      dateOfDeactivation?: string;
      /** Format: uuid */
      guid?: string;
      name?: string;
      description?: string;
      /** Format: uuid */
      organisationId?: string;
      organisationName?: string;
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      /** Format: int64 */
      buildNumber?: number;
      exportFormats?: string[];
      filters?: components["schemas"]["FilterAssignmentDto"][];
      objectTypes?: components["schemas"]["PropertyOrGroupPublicReference"][];
      dataFormats?: (
        | components["schemas"]["IFCDto"]
        | components["schemas"]["OKSTRADto"]
        | components["schemas"]["OtherDto"]
      )[];
      properties?: components["schemas"]["PropertyOrGroupPublicReference"][];
      levelOfDetail?: string;
      dimensionality?: string;
      location?: string;
      appearance?: string;
      behaviour?: string;
      geometricComment?: string;
      documentations?: components["schemas"]["DocumentationDto"][];
      fallbackPropertyGroupName?: string;
      classifications?: components["schemas"]["ClassificationPublicDto"][];
      contexts?: components["schemas"]["ContextInfoPublicReference"][];
    };
    OKSTRADto: components["schemas"]["DataFormatDto"] & {
      /** Format: uuid */
      fileId?: string;
      fileName?: string;
      name?: string;
    };
    OtherDto: components["schemas"]["DataFormatDto"] & {
      dataFormatVersion?: string;
      viewType?: string;
      name?: string;
    };
    PropertyOrGroupPublicReference: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      name?: string;
    };
    FilterForPublicDto: {
      name: string;
      /** Format: uuid */
      guid: string;
    };
    FilterGroupForPublicDto: {
      name: string;
      /** Format: uuid */
      guid: string;
      filter?: components["schemas"]["FilterForPublicDto"][];
    };
    AIADomainSpecificModelPublicDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdDate?: string;
      /** Format: date-time */
      dateOfActivation?: string;
      /** Format: date-time */
      dateOfLastChange?: string;
      /** Format: date-time */
      dateOfRevision?: string;
      /** Format: date-time */
      dateOfVersion?: string;
      /** Format: date-time */
      dateOfDeactivation?: string;
      /** Format: uuid */
      guid?: string;
      name?: string;
      description?: string;
      /** Format: uuid */
      organisationId?: string;
      organisationName?: string;
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      /** Format: int64 */
      buildNumber?: number;
      exportFormats?: string[];
      /** @enum {string} */
      templateType?:
        | "COMPLETED_TEMPLATE"
        | "UNCOMPLETED_TEMPLATE"
        | "PROJECT_TEMPLATE";
      chapters?: components["schemas"]["ChapterPublicReference"][];
      loins?: components["schemas"]["LoinPublicReference"][];
      dataFormats?: (
        | components["schemas"]["IFCDto"]
        | components["schemas"]["OKSTRADto"]
        | components["schemas"]["OtherDto"]
      )[];
    };
    ChapterPublicReference: {
      title?: string;
      content?: string;
      chapterNumber?: string;
      pleaseChange?: boolean;
    };
    LoinPublicReference: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      name?: string;
    };
    AIAContextInfoPublicDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdDate?: string;
      /** Format: date-time */
      dateOfActivation?: string;
      /** Format: date-time */
      dateOfLastChange?: string;
      /** Format: date-time */
      dateOfRevision?: string;
      /** Format: date-time */
      dateOfVersion?: string;
      /** Format: date-time */
      dateOfDeactivation?: string;
      /** Format: uuid */
      guid?: string;
      name?: string;
      description?: string;
      /** Format: uuid */
      organisationId?: string;
      organisationName?: string;
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      /** Format: int64 */
      buildNumber?: number;
      exportFormats?: string[];
      /** @enum {string} */
      templateType?:
        | "COMPLETED_TEMPLATE"
        | "UNCOMPLETED_TEMPLATE"
        | "PROJECT_TEMPLATE";
      chapters?: components["schemas"]["ChapterPublicReference"][];
      /** @enum {string} */
      contextType?:
        | "CONSTRUCTION_TYPE"
        | "PURPOSE"
        | "PROJECT_PHASE"
        | "ACTOR"
        | "DOMAIN_SPECIFIC_MODEL_TYPE";
      alternativeIdentifier?: string;
    };
    AIATemplatePublicDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdDate?: string;
      /** Format: date-time */
      dateOfActivation?: string;
      /** Format: date-time */
      dateOfLastChange?: string;
      /** Format: date-time */
      dateOfRevision?: string;
      /** Format: date-time */
      dateOfVersion?: string;
      /** Format: date-time */
      dateOfDeactivation?: string;
      /** Format: uuid */
      guid?: string;
      name?: string;
      description?: string;
      /** Format: uuid */
      organisationId?: string;
      organisationName?: string;
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      /** Format: int64 */
      buildNumber?: number;
      exportFormats?: string[];
      /** @enum {string} */
      templateType?:
        | "COMPLETED_TEMPLATE"
        | "UNCOMPLETED_TEMPLATE"
        | "PROJECT_TEMPLATE";
      chapters?: components["schemas"]["ChapterPublicReference"][];
    };
    AIADomainSpecificModelPublicReference: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      guid?: string;
      version?: string;
      name?: string;
    };
    AIAProjectPublicDto: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdDate?: string;
      /** Format: date-time */
      dateOfActivation?: string;
      /** Format: date-time */
      dateOfLastChange?: string;
      /** Format: date-time */
      dateOfRevision?: string;
      /** Format: date-time */
      dateOfVersion?: string;
      /** Format: date-time */
      dateOfDeactivation?: string;
      /** Format: uuid */
      guid?: string;
      name?: string;
      description?: string;
      /** Format: uuid */
      organisationId?: string;
      organisationName?: string;
      /** Format: int64 */
      versionNumber?: number;
      /** Format: int64 */
      revisionNumber?: number;
      /** Format: int64 */
      buildNumber?: number;
      exportFormats?: string[];
      /** @enum {string} */
      templateType?:
        | "COMPLETED_TEMPLATE"
        | "UNCOMPLETED_TEMPLATE"
        | "PROJECT_TEMPLATE";
      chapters?: components["schemas"]["ChapterPublicReference"][];
      coordinateSystem?: components["schemas"]["CoordinateSystem"];
      models?: components["schemas"]["AIADomainSpecificModelPublicReference"][];
      automaticDomainSpecificModels?: components["schemas"]["AutomaticDomainSpecificModelEntryPublicReference"][];
      dataFormats?: (
        | components["schemas"]["IFCDto"]
        | components["schemas"]["OKSTRADto"]
        | components["schemas"]["OtherDto"]
      )[];
    };
    AutomaticDomainSpecificModelEntryPublicReference: {
      contexts?: components["schemas"]["ContextInfoPublicReference"][];
      loins?: components["schemas"]["LoinPublicReference"][];
    };
    CoordinateSystem: {
      name?: string;
      zone?: string;
      east?: number;
      north?: number;
      height?: number;
    };
  };
}

export interface operations {
  refreshToken: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["JWTTokenPublicDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenRequestDTO"];
      };
    };
  };
  /** Diese API erfordert eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header. */
  logout: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  login: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["JWTTokenPublicDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLoginPublicDto"];
      };
    };
  };
  getOrganisationsForPublic: {
    responses: {
      /** Liste von Organisationen */
      200: {
        content: {
          "application/json": components["schemas"]["OrganisationForPublicDTO"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erfordert eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header. */
  getOrganisationsOfUser: {
    parameters: {
      query: {
        userId: string;
      };
    };
    responses: {
      /** Liste von Organisationen */
      200: {
        content: {
          "application/json": components["schemas"]["OrganisationForPublicDTO"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Merkmalsgruppen abrufen zu können. */
  getProperyGroupsForPublic: {
    responses: {
      /** Eine Liste von Merkmalsgruppen */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyOrGroupForPublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertyOrGroupForPublicRequest"];
      };
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Merkmale abrufen zu können. */
  getPropertiesForPublic: {
    responses: {
      /** Eine Liste von Merkmalen. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyOrGroupForPublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertyOrGroupForPublicRequest"];
      };
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Merkmalsgruppen abrufen zu können. */
  getPropertyGroupForPublic: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine Merkmalsgruppe */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyGroupDto"];
        };
      };
      /** Es besteht kein Recht, diese Merkmalsgruppe zu sehen. */
      403: unknown;
      /** Es existiert keine Merkmalsgruppe mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Merkmale abrufen zu können. */
  getPropertyForPublic: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Ein Merkmal. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyDto"];
        };
      };
      /** Es besteht kein Recht, dieses Merkmal zu sehen. */
      403: unknown;
      /** Es existiert kein Merkmal mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  getGlobalFilters: {
    responses: {
      /** Liste von Filtern. */
      200: {
        content: {
          "application/json": components["schemas"]["TagGroupForPublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getLoinsForPublic: {
    responses: {
      /** Eine Liste von LOINs. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleLoinPublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoinForPublicRequest"];
      };
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getDomainSpecificModelsForPublic: {
    responses: {
      /** Eine Liste von Fachmodellen. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleDomainSpecificModelPublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiaDomainSpecificModelForPublicRequest"];
      };
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getContextInfosForPublic: {
    responses: {
      /** Eine Liste von Kontextinformationen. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleContextInfoPublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiaContextInfoPublicRequest"];
      };
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getTemplatesForPublic: {
    responses: {
      /** Eine Liste von Vorlagen. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleAiaTemplatePublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiaTemplateForPublicRequest"];
      };
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getProjectsForPublic: {
    responses: {
      /** Eine Liste von Projekten. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleAiaProjectPublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiaProjectForPublicRequest"];
      };
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getLoinForPublic: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine LOIN. */
      200: {
        content: {
          "application/json": components["schemas"]["LOINPublicDto"];
        };
      };
      /** Es besteht kein Recht, diese LOIN zu sehen. */
      403: unknown;
      /** Es existiert keine LOIN mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportPdf: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine LOIN im PDF-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese LOIN zu sehen. */
      403: unknown;
      /** Es existiert keine LOIN mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportOdt: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine LOIN im ODT-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese LOIN zu sehen. */
      403: unknown;
      /** Es existiert keine LOIN mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportOkstra: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Okstra-Dateien, die mit der LOIN assoziiert sind. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese LOIN zu sehen. */
      403: unknown;
      /** Es existiert keine LOIN mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportXml: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine LOIN im XML-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese LOIN zu sehen. */
      403: unknown;
      /** Es existiert keine LOIN mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportIds: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** IDS-Dateien, die mit der LOIN assoziiert sind. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese LOIN zu sehen. */
      403: unknown;
      /** Es existiert keine LOIN mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  getGlobalFilters1: {
    responses: {
      /** Liste von Filtern. */
      200: {
        content: {
          "application/json": components["schemas"]["FilterGroupForPublicDto"][];
        };
      };
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getDomainSpecificModelForPublic: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Ein Fachmodell. */
      200: {
        content: {
          "application/json": components["schemas"]["AIADomainSpecificModelPublicDto"];
        };
      };
      /** Es besteht kein Recht, dieses Fachmodell zu sehen. */
      403: unknown;
      /** Es existiert kein Fachmodell mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportPdf_1: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Ein Fachmodell im PDF-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Fachmodell zu sehen. */
      403: unknown;
      /** Es existiert kein Fachmodell mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportOdt_1: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Ein Fachmodell im ODT-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Fachmodell zu sehen. */
      403: unknown;
      /** Es existiert kein Fachmodell mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportOkstra_1: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Okstra-Dateien, die mit dem Fachmodell assoziiert sind. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Fachmodell zu sehen. */
      403: unknown;
      /** Es existiert kein Fachmodell mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportXml_1: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** LOIN-XML-Dateien, die mit dem Fachmodell assoziiert sind. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Fachmodell zu sehen. */
      403: unknown;
      /** Es existiert kein Fachmodell mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportIds_1: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** IDS-Dateien, die mit dem Fachmodell assoziiert sind. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Fachmodell zu sehen. */
      403: unknown;
      /** Es existiert kein Fachmodell mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getContextInfoForPublic: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine Kontextinformation. */
      200: {
        content: {
          "application/json": components["schemas"]["AIAContextInfoPublicDto"];
        };
      };
      /** Es besteht kein Recht, diese Kontextinformation zu sehen. */
      403: unknown;
      /** Es existiert keine Kontextinformation mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportPdf_2: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine Kontextinformation im PDF-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese Kontextinformation zu sehen. */
      403: unknown;
      /** Es existiert keine Kontextinformation mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportOdt_2: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine Kontextinformation im ODT-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese Kontextinformation zu sehen. */
      403: unknown;
      /** Es existiert keine Kontextinformation mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getTemplateForPublic: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine Vorlage. */
      200: {
        content: {
          "application/json": components["schemas"]["AIATemplatePublicDto"];
        };
      };
      /** Es besteht kein Recht, diese Vorlage zu sehen. */
      403: unknown;
      /** Es existiert keine Vorlage mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportPdf_3: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine Vorlage im PDF-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese Vorlage zu sehen. */
      403: unknown;
      /** Es existiert keine Vorlage mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportOdt_3: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Eine Vorlage im ODT-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, diese Vorlage zu sehen. */
      403: unknown;
      /** Es existiert keine Vorlage mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  getProjectForPublic: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Ein Projekt. */
      200: {
        content: {
          "application/json": components["schemas"]["AIAProjectPublicDto"];
        };
      };
      /** Es besteht kein Recht, dieses Projekt zu sehen. */
      403: unknown;
      /** Es existiert kein Projekt mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen. */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportPdf_4: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Ein Projekt im PDF-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Projekt zu sehen. */
      403: unknown;
      /** Es existiert kein Projekt mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportOdt_4: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Ein Projekt im ODT-Format. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Projekt zu sehen. */
      403: unknown;
      /** Es existiert kein Projekt mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportOkstra_2: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** Okstra-Dateien, die mit dem Projekt assoziiert sind. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Projekt zu sehen. */
      403: unknown;
      /** Es existiert kein Projekt mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportXml_2: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** LOIN-XML-Dateien, die mit dem Projekt assoziiert sind. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Projekt zu sehen. */
      403: unknown;
      /** Es existiert kein Projekt mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
  /** Diese API erlaubt optional eine Authentifizierung mittels 'Bearer {accessToken}' über den Authorization-Header, um nicht öffentlich sichtbare Informationselemente abrufen zu können. */
  exportIds_2: {
    parameters: {
      path: {
        guid: string;
      };
    };
    responses: {
      /** IDS-Dateien, die mit dem Projekt assoziiert sind. */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Es besteht kein Recht, dieses Projekt zu sehen. */
      403: unknown;
      /** Es existiert kein Projekt mit der GUID. */
      404: unknown;
      /** Zu viele gleichzeitige Serveranfragen */
      429: unknown;
    };
  };
}

export interface external {}
